## Safety ##
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

## Improved output ##
alias df='df -h'
alias diff='colordiff'
alias dirsize='du -hs'
alias du='du -h'
alias free='free -m'
alias grep='grep --color'
alias egrep='egrep --color'
alias zrep='zgrep --color'
alias pgrep='pgrep -l'
alias rsync='rsync -h'
alias ssh='TERM=xterm ssh'
alias tree='tree -CF'

## Convenience ##
alias cpan='sudo perl -MCPAN -e shell'
alias h="history -1 | sed 's/^\s*[0-9]\+\s*//'"
alias l.='ls -dF .[a-zA-Z0-9]*'
alias la='ls -a'
alias ld.='ls -d .*/'
alias ld='ls -d */'
alias lf.='ls .*(.)'
alias lf='ls *(.)'
alias ll='ls -lh'
alias lt='ls -t1'
alias lsr='listrepos'
alias mkdir='mkdir -p'
alias npm-exec='PATH=$(npm bin):$PATH'
alias awnpm='npm_config_registry=$AWEBER_NPM_REGISTRY npm'
alias npmaw='npm_config_registry=$AWEBER_NPM_REGISTRY npm'
alias npms='jq ".scripts" ./package.json'
alias npmv='jq ".version" ./package.json'
alias npmoutdated="npm -s outdated | egrep -v '>'"
alias nt='python setup.py -q nosetests'
alias pd='python setup.py develop'
alias pg='ps ax | grep'
alias psg='ps aux | grep -v grep | egrep'
alias realpath="python -c 'import os, sys; print os.path.realpath(sys.argv[1])'"
#alias realpath='readlink -f'
alias s='sudo -s'
alias taggable="svn diff -r \$(svn log ../tags/\$(ls ../tags | sort -n -t . -k 1,1 -k 2,2 -k 3,3 | tail -n1) --stop-on-copy -q | grep ^r | awk '{print \$1}' | sed 's/r//'):HEAD --summarize"
alias xx='exit'
alias xxs='touch /tmp/stayloggedin && exit'

## Troubleshooting ##
alias pscpu="ps -e -o pcpu,cpu,nice,state,cputime,args --sort -pcpu | sed '/^ 0.0 /d'"
alias psmem="ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS"

## Utility ##
alias dateR="python -c 'from email.Utils import formatdate; print formatdate(localtime=True)'"
alias datetag="date '+%Y%m%d-%H%M'"
alias ping='ping -c 3'
alias pypath="python -c 'import sys; print "'":"'".join([p for p in sys.path if p])'"
alias unbz2='tar xjf'
alias untgz='tar xzf'
alias wget='wget -c'

## Fast fingers ##
alias dkpg='dpkg'
alias dkpg-buildpackage='dpkg-buildpackage'
alias eixt='exit'
alias exi='exit'
alias :q='exit'
alias snv='svn'
alias sqpl='sqlp'

alias cl='awchangelog --overwrite'

## Functions ##

# Sum a list of numbers.
add (){
   if test -n "$1"
   then
      cat "$1" | awk '{sum += $1} END {print sum}'
   else
      (while read line; do echo $line | tr ' ' "\n"; done) | awk '{sum += $1} END {print sum}'
   fi
}

avg () {
    if test -n "$1"; then
        cat "$1" | awk '{total+=$1} END {print total/NR}'
    else
      (while read line; do echo $line | tr ' ' "\n"; done) | awk '{total+=$1} END {print total/NR}'
    fi
}

stats () {
    if test -n "$1"; then
        cat "$1" | awk 'NR == 1 { max=$1; min=$1; sum=0; sumsq=0 } { if ($1>max) max=$1; if ($1<min) min=$1; sum+=$1; sumsq+=$1*$1} END {printf "Min: %f   Max: %f   Average: %f   Variance: %f   StdDev: %f\n", min, max, sum/NR, sumsq/NR - (sum/NR)**2, sqrt(sumsq/NR - (sum/NR)**2)}'
    else
      (while read line; do echo $line | tr ' ' "\n"; done) | awk 'NR == 1 { max=$1; min=$1; sum=0; sumsq=0 } { if ($1>max) max=$1; if ($1<min) min=$1; sum+=$1; sumsq+=$1*$1} END {printf "Min: %f   Max: %f   Average: %f   Variance: %f   StdDev: %f\n", min, max, sum/NR, sumsq/NR - (sum/NR)**2, sqrt(sumsq/NR - (sum/NR)**2)}'
    fi
}

# Human readable mtime of file(s).
lmod () {
    if test -n "$1"; then
        if [ ! -f "$1" ]; then
            echo "Argument must be a file!"
            exit 1
        fi
        td $(( `date '+%s'` - `stat -f '%m' "$1"` )) | sed "s#^#$1    modified #" | sed 's/$/ ago/'
    else
        lines=$(while read line; do echo "$line"; done)
        longest=$(echo $lines | awk '{print length(), $0 | "sort -nr"}' | head | awk '{print $1}' | head -n1)
        for line in $(echo $lines | xargs); do
            lmod "$line" | awk "{printf \"%-${longest}s    %s\n\", \$1,\$2}" FS='    '
        done
    fi
}

# Colorize tail output for log monitoring.
function ctail() {
    /usr/bin/tail $@ | colorlogging
}

function tail() {
    if [[ "$@" = *log* ]]; then
        ctail $@
    else
        /usr/bin/tail $@
    fi
}

function colorlogging() {
    perl -pe 'sub c {%c=("ERROR",31,"ERR",31,"INFO",32,"DEBUG",36,"WARNING",33,"CRITICAL",35);"\e[1;".$c{@_[0]}."m".@_[1]}s/.*\b(ERROR|ERR|WARNING|CRITICAL|DEBUG|INFO)\b.*/c($1,$&)/ge;'
}

function colorhttp() {
    perl -pe 'sub c {%c=("5",31,"4",33);"\e[1;".$c{@_[0]}."m".@_[1]}s#.* HTTP/1.1" (2|4|5)\d\d .*#c($1,$&)#ge;'
}

# Run cake testcase.
function caketestcase () {
    php -q /home/sites/cake_core/1.2b/cake/console/cake.php -app /home/sites/$1 testsuite app case $2
}

# Run cake testgroup.
function caketestgroup () {
    php -q /home/sites/cake_core/1.2b/cake/console/cake.php -app /home/sites/$1 testsuite app group $2
}

# Copy and go to dir.
cpg (){
  if [ -d "$2" ];then
    cp $1 $2 && cd $2
  else
    cp $1 $2
  fi
}

# Find and display top 10 files/directories.
function dutop () {
   if [ "$1" ]; then
      LOC="$1"
   else
      LOC="$PWD"
   fi

   TOP=10
   if [ "$2" ]; then
      if [[ $2 != *[^0-9]* ]]; then
         TOP="$2"
      fi
   fi

   sudo du -a "$LOC" | sort -nr | head -n $TOP | cut -f 2- | while read a; do sudo du -sh "$a"; done
}

# Remove cruft recursively.
function decruft () {
    rm -f **/*.pyc
    rm -f **/svn-commit.tmp
    rm -rf **/*.egg-info
}

# iTerm2 growl notifications
function growl () {
    echo -e $'\e]9;'${1}'\007'
}

# Uncompress a file. Also see package unp.
#unpack () {
#   if [ ! -n "$1" ]; then
#      echo "usage: $0 filename.<7z|Z|bz2|gz|lzma|rar|tar|tar.bz2|tar.gz|tbz2|tgz|zip>"
#      return
#   fi
#
#   if [ -f "$1" ]; then
#      case $1 in
#         *.7z)        7z x $1 ;;
#         *.Z)         uncompress $1 ;;
#         *.lzma)      unlzma -cd $1 | tar -xf- ;;
#         *.rar)       rar x $1 ;;
#         *.tar.bz2)   tar xjf $1 ;;
#         *.tar.gz)    tar xzf $1 && tar xf ${1%.gz} ;;
#         *.bz2)       bunzip2 $1 ;;
#         *.gz)        gunzip $1 ;;
#         *.tar)       tar xf $1 ;;
#         *.tbz2)      tar xjf $1 ;;
#         *.tgz)       tar xzf $1 ;;
#         *.zip)       unzip $1 ;;
#         *)           echo "'$1' cannot be extracted via unpack()" ;;
#      esac
#   else
#      #*.lzma)      unlzma $1 && tar xf ${1%.lzma} ;;
#      echo "'$1' is not a valid file"
#   fi
#}
alias unpack='extract'

function lab() {
    local input=""

    if [[ -p /dev/stdin ]]; then
        input="$(cat -)"
    else
        input="${@}"
    fi

    if [[ -n "$input" ]]; then
        open "${GITLAB_HOST}/${input}"
    elif [[ -d "./.git" ]]; then
        open `git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'`
    fi
}

# Echo a specific line of a file.
line (){
   if test -n "$2"
   then
      head -n "$1" "$2" | tail -n 1
   else
      (while read line; do echo $line; done) | head -n "$1" | tail -n 1
   fi
}

# Case-insensitive ls
ils () {
    find . -maxdepth 1 -iname "$1" | sed 's#\./##' | xargs ls
}

# Compare directory listings.
lscmp (){
   comm <(ls "$1") <(ls "$2")
}

function lookup_pkg () {
    pkg="$1"
    echo -n "==[$pkg]";printf "%$((59 - $((${#pkg} + 4))))s\n"|tr ' ' '='
    pkg_status $pkg
    echo
    echo
}

function paths () {
    for d in $(echo $PATH | tr ':' '\n'); do [ -e "$d/$1" ] && echo "$d/$1"; done
}

function pkg_status (){
    (for repo in lucid hardy; do lynx -dump -listonly http://repo/ubuntu-custom/$repo-aw/packages/ | grep "$1_" | sed 's/.*_\(.*\)_.*/\1/' | sed "s/$/ $repo/"; lynx -dump -listonly http://repo/ubuntu-custom/$repo-aw-dev/packages/ | grep --color "$1_" | sed 's/.*_\(.*\)_.*/\1/' | sed "s/$/ $repo development/"; done) | sort -t . -k 1,1n -k 2,2n -k 3,3n | awk '{ a[NR]=$0 } END { for(i=NR; i; --i) print a[i] } ' | column -t
}

function rdeps () {
    for pkg in $(apt-rdepends "$1" | sed 's/^  Depends: //' | awk '{print $1}' | sort | uniq); do; [ -d "/opt/packages/$pkg" ] && lookup_pkg "$pkg"; done
}

# Echo a specific line of a file (good for many).
manyline (){
   grep -n . "$2" | sed 's/^[^:]*://' | grep "^$1:" | sed "s/^$1://"
}

# Make and go to dir.
mkdirg () {
   mkdir "$1" && cd "$1"
}

# Move and go to dir.
mvg (){
  if [ -d "$2" ];then
    mv $1 $2 && cd $2
  else
    mv $1 $2
  fi
}

function pkg () {
    package=$($HOME/bin/pkg "$1")
    if [ -n "$package" ]; then
        cd "$package"
        unset package
    fi
}

# Find processes to kill and kill them.
pskill () {
    for pid in $(ps -U ${USER} | grep $1 | awk '{print $1}')
    do
        echo -n "Killing $1 (process $pid)..."
        kill -9 $pid
        echo "killed."
    done
}

# Wrap pwd to take a file argument
pwd () {
    if [ -f "$1" ]; then
        `readlink --version &> /dev/null` && READLINKVER=gnu || READLINKVER=bsd
        if [[ "$READLINKVER" = gnu ]]; then
            readlink -f "$1"
        else
            readlink "$1"
        fi
    else
        builtin pwd
    fi
}

# Get version of python package
pyver () {
    python -c "import pkg_resources; print pkg_resources.get_distribution('$1')"
}

# Search for various types of README files in dir and display them in $PAGER.
readme () {
   local files
   #files=(./(#i)*(read*me|lue*m(in|)ut)*(ND))
   files=`ls | grep -i readme`
   if (($#files))
   then $PAGER $files
   else
      print 'No README files.'
   fi
}

# Search/replace directory inline.
function replaceall () {
    FIND="$1"
    REPLACE="$2"
    FILECOUNT=$(find . -type f -not -iwholename '*.svn*' -print | wc -l)
    OCCURENCES=$(find . -type f -not -iwholename '*.svn*' -print0 | xargs -0 cat | grep -o "$FIND" | wc -l)
    if [ "$OCCURENCES" -gt 0 ]; then
        ack -l "$FIND" | xargs sed -i "" -e "s/$FIND/$REPLACE/g"
        [ "$OCCURENCES" -eq 1 ] && S1="" || S1="s"
        [ "$FILECOUNT" -eq 1 ] && S2="" || S2="s"
        echo "Replaced ${OCCURENCES//[[:space:]]} occurence$S1 of \"$FIND\" with \"$REPLACE\" amongst ${FILECOUNT//[[:space:]]} file$S2."
    else
        echo "Nothing to replace"
    fi
}

function searchcsh () {
    for domainname in colo.lair int.prd.csh lbl.prd.csh svc.prd.csh int.csh lbl.csh svc.csh int.stg.csh lbl.stg.csh svc.stg.csh int.tst.csh lbl.tst.csh; do
        dig -t AXFR $domainname | grep -v ";"
    done
}

function searchchf () {
    for domainname in ofc.lair int.prd.chf lbl.prd.chf svc.prd.chf int.chf lbl.chf svc.chf int.stg.chf lbl.stg.chf svc.stg.chf int.tst.chf lbl.tst.chf ; do
        dig -t AXFR $domainname | grep -v ";"
    done
}

# Recursive grep that ignores svn directories/files.
function svngrep () {
   # Last arg should be the path
   case "$SHELL" in
      '/bin/zsh')
         LAST="${@[$#]}"
         ;;
      '/bin/bash')
         LAST="${!#}"
         ;;
   esac

   if [[ -d $LAST ]]; then
      LOC="$LAST"
   else
      LOC=`pwd`
   fi

   find "$LOC" -path '*/.svn' -prune -o -type f -print | xargs grep --color "$@"
}

# Reverse lines
tac () {
    awk '1 { last = NR; line[last] = $0; } END { for (i = last; i > 0; i--) { print line[i]; } }'
}

# Automatically use sudo for non-writable files.
vi () {
    VIM=`builtin which vim`
    if [ -f "$1" ]; then
        if [ -w "$1" ]; then
            $VIM $@
        else
            sudo $VIM $@
        fi
    else
        $VIM $@
    fi
}

# Also cat the file if it's in ~/bin and is short
which () {
    builtin which $@
    if [ -t 1 ]; then
        WHICH=`builtin which "$@" | head -n1`
        if echo $WHICH | egrep -q 'jimf/bin'; then
            if [ "`wc -l $WHICH | awk '{print $1}'`" -le 30 ]; then
                echo
                cat $WHICH
            fi
        fi
    fi
}

# Strip ANSI formatting from text
function noansi () {
    perl -pe "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}

# Convert epoch timestamp to human readable format
function epoch2date() {
    `date --version &> /dev/null` && DATEVER=gnu || DATEVER=bsd
    if test -n "$1"
    then
        if [[ "$DATEVER" = bsd ]]; then
            date -r "$1"
        else
            date -d "1970-01-01 $1 sec GMT"
        fi
    else
        while read line
        do
            if [[ "$DATEVER" = bsd ]]; then
                date -r "$line"
            else
                date -d "1970-01-01 $line sec GMT"
            fi
        done
    fi
}

function px2rem() {
    if test -n "$1"; then
        line=$1
        awk 'BEGIN {printf "%srem\n", '${line%%px}'/16}'
    else
        while read line; do
            awk 'BEGIN {printf "%srem\n", '${line%%px}'/16}'
        done
    fi
}

function splitpath() {
   if test -n "$1"
   then
      echo "$1" | tr ':' "\n"
   else
      (while read line; do echo $line | tr ':' "\n"; done)
   fi
}

function green() {
    echo -e "\e[1;32m$*\e[1;00m"
}

function red() {
    echo -e "\e[0;31m$*\e[1;00m"
}
